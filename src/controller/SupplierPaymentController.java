package controller;

import model.Main;
import model.SupplierPayment;
import model.User;
//import model.repairOrderFormModel;
import model.supplier;
import model.supplierOrder;
import service.EmployeeServiceImpl;
import service.IEmployeeService;
import service.ISupplierService;
import service.SupplierImpl;
import util.Generator;
import util.sqlConnection;
import java.time.format.DateTimeFormatter;
import java.net.URL;
import java.sql.Connection;
import javafx.collections.transformation.SortedList;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.function.Predicate;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.collections.transformation.FilteredList;
import javafx.scene.control.DatePicker;
import javafx.scene.layout.AnchorPane;
import javafx.scene.text.Text;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class SupplierPaymentController implements Initializable{
	
	PreparedStatement preparedStatement=null;
	ResultSet resultSet=null;
	Connection connection;
	//public ObservableList<Emp> list = FXCollections.observableArrayList();
	
	
	@FXML
	private Label userLbl;
	
	@FXML
	TableView<SupplierPayment> paymenttable;
	@FXML
	private TableColumn<?, ?> payIDcol;
	@FXML
	private TableColumn<?, ?> orderIDcol;
	@FXML
	private TableColumn<?, ?> typecol;
	@FXML
	private TableColumn<?, ?> quantitycol;
	@FXML
	private TableColumn<?, ?> datecol;
	@FXML
	private TableColumn<?,?> timecol;
	@FXML
	private TableColumn<?,?> amountcol;
	
	public ObservableList<SupplierPayment> list = FXCollections.observableArrayList();
	
	
	@FXML
	private TextField txtPaymentID;
	@FXML
	private TextField txtOrderID;
	@FXML
	private ComboBox<String> txttype;
	public ObservableList<String> txtList = FXCollections.observableArrayList("Cheque","Cash");
	@FXML
	private TextField txtquantity;
	@FXML
	private DatePicker txtdate;
	@FXML
	private TextField txttime;
	@FXML
	private TextField txtamount;
	@FXML
	private TextField delpayID;
	@FXML
	private TextField payID;
	
	FilteredList<SupplierPayment> filter = new FilteredList(list, e -> true);
	
	@FXML
	private Label userLabel;
	
	private User userObj = new User();
    
    public void loadUser(User user) {

    	this.userObj = user;
    	
    	IEmployeeService empService = new EmployeeServiceImpl();
  
    	userLabel.setText(empService.loadname(userObj));
    }
	
	
    public void loadDBdata() {
		
    	list.clear();
		
		ISupplierService iSupplierService = new SupplierImpl();
		
		ArrayList<SupplierPayment> supList = iSupplierService.getAllSupplierPay();
		
		for(SupplierPayment sup : supList) {
			list.add(sup);
		}
			
		
		paymenttable.setItems(list);
		
	}

    ISupplierService isupplierService = new SupplierImpl();
	// Event Listener on Button.onAction
	@FXML
	public void AddNewPayment(ActionEvent event) throws SQLException {
		// TODO Autogenerated
		if(validateFields()) {
				if(validatePayID()) {
					if(validateOrdID()) {
						if(validateType()) {
							if(validateQuantity()) {
								if(validateAmt()) {
		
		SupplierPayment sup = new SupplierPayment();
		
		sup.setPaymentID(txtPaymentID.getText());
		sup.setOrder_id(txtOrderID.getText());
		sup.setType(txttype.getValue());
		sup.setSupquantity(txtquantity.getText());
		sup.setDate(txtdate.getValue().toString());
		sup.setTime(txttime.getText());
		sup.setAmount(txtamount.getText());
		
		isupplierService.addSupplierPay(sup);
		//txtcountry.clear();
		
		list.clear();
		clear(event);
		loadDBdata();
		txtPaymentID.setText(Generator.generateSupplierPayId());
		  }
		 }
		}
	   }
	  }
	}
   }				
	//static String tmpEmpName;
	@Override
	public void initialize(URL location, ResourceBundle resource) {
		
		//connection = sqlConnection.Connector();
		txtPaymentID.setText(Generator.generateSupplierPayId());
		loadDBdata();
		
		
		payIDcol.setCellValueFactory(new PropertyValueFactory<>("paymentID"));
		orderIDcol.setCellValueFactory(new PropertyValueFactory<>("order_id"));
		typecol.setCellValueFactory(new PropertyValueFactory<>("type"));
		quantitycol.setCellValueFactory(new PropertyValueFactory<>("supquantity"));
		datecol.setCellValueFactory(new PropertyValueFactory<>("date"));
		timecol.setCellValueFactory(new PropertyValueFactory<>("time"));
		amountcol.setCellValueFactory(new PropertyValueFactory<>("amount"));
		//countrycol.setCellValueFactory(new PropertyValueFactory<>("sCountry"));
		
		//paymenttable.setItems(list);
		txttype.setItems(txtList);
		/*table.setOnMouseClicked(p ->{
		
			String query =  "select * from empregister";
			
			try {
				preparedStatement = connection.prepareStatement(query);
				resultSet = preparedStatement.executeQuery();
			
				
				while(resultSet.next())
				{
							txtempname.setText(resultSet.getString("EmpName"));
							txtaddress.setText(resultSet.getString("Address"));
							txtNic.setText(resultSet.getString("NIC"));
							txtdesig.setText(resultSet.getString("Designation"));
							txtTel.setText(resultSet.getString("Telephone"));
							txtemail.setText(resultSet.getString("Email"));
							
					//table.setItems(list);
				}
				preparedStatement.close();
				resultSet.close();
			}catch (Exception e) {
				// TODO: handle exception
				System.out.println(e);
			}
			
	
		});*/
		
	}
	
	public void clear(ActionEvent event) {
		
		txtPaymentID.setText("");
		txtOrderID.setText("");
		txttype.setValue(null);
		txtquantity.setText("");
		txtdate.setValue(null);
		txttime.setText("");
		txtamount.setText("");
	}
	
	static String tempPay;
	@FXML
	public void ShowOnClick() {
		
			SupplierPayment sup = paymenttable.getSelectionModel().getSelectedItem();
			
			tempPay = sup.getPaymentID();
			
			txtPaymentID.setText(sup.getPaymentID());
			txtOrderID.setText(sup.getOrder_id());
			txttype.setValue(sup.getType());
			txtquantity.setText(sup.getSupquantity());
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			String date = sup.getDate();
			LocalDate localDate = LocalDate.parse(date, formatter);
			txtdate.setValue(localDate);
			//txtdate.setText(pay.getDate());
			txttime.setText(sup.getTime());
			txtamount.setText(sup.getAmount());
			delpayID.setText(sup.getPaymentID());
			//txtcountry.setText(sup.getSCountry());
			
			//preparedStatement.close();
			//resultSet.close();
			
	}
	
	@FXML
	private void deleteData(ActionEvent event){
		if(validateDelPayID()) {
		
		isupplierService.deleteSupplierPay(txtPaymentID.getText());
		clear(event);
		//txtcountry.clear();
		//list.clear();
		loadDBdata();
		txtPaymentID.setText(Generator.generateSupplierPayId());
	  }
	}
	
	@FXML
    public void UpdateData(ActionEvent event) {
			SupplierPayment sup = new SupplierPayment();
			
			sup.setPaymentID(txtPaymentID.getText());
			sup.setOrder_id(txtOrderID.getText());
			sup.setType(txttype.getValue());
			sup.setSupquantity(txtquantity.getText());
			sup.setDate(txtdate.getValue().toString());
			sup.setTime(txttime.getText());
			sup.setAmount(txtamount.getText());
			//String country = txtcountry.getText();
			
			isupplierService.updateSupplierPay(sup);
			clear(event);
		//list.clear();
			loadDBdata();
			txtPaymentID.setText(Generator.generateSupplierPayId());
		
    }
	
	@FXML
	public void searchSupplierPayment(javafx.scene.input.KeyEvent event) {
		
		payID.textProperty().addListener((observable, oldValue, newValue) -> {
			
			filter.setPredicate((Predicate<? super SupplierPayment>) (SupplierPayment sList) ->{
				if(newValue.isEmpty() || newValue == null) {
					return true;
				}
				else if(sList.getPaymentID().contains(newValue)) {
					return true;
				}
				
				return false;
			});
	});
		
		SortedList sort = new SortedList(filter);
		sort.comparatorProperty().bind(paymenttable.comparatorProperty());
		paymenttable.setItems(sort);
	
	}
	
	public void demo(ActionEvent event) {
		txtPaymentID.setText("P008");
		txtOrderID.setText("O008");
		txttype.setValue("Cheque");
		txtquantity.setText("8");
		//txtdate.setValue(null);
		txttime.setText("09:45");
		txtamount.setText("200000");
	}
	
	public void ExitWindow(ActionEvent event) throws Exception{
		Platform.exit();
	}
	
	public void MinimizeWindow(ActionEvent event) throws Exception{
		FXMLLoader loader = new FXMLLoader();
		loader.setLocation(getClass().getResource("/view/Login.fxml"));
		Parent parent = loader.load();
		
		Scene scene =  new Scene(parent);
		scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());

		
		Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
		
		window.setScene(scene);
		window.show();
		window.centerOnScreen();
	}
	
	
	//Functions to change the screens 
	//Functions to change the screens 
	public void homeScreen( ActionEvent event ) throws Exception{
		FXMLLoader loader = new FXMLLoader();
		loader.setLocation(getClass().getResource("/view/Home.fxml"));
		Parent parent = loader.load();
		
		Scene scene =  new Scene(parent);
		scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
		
		HomeController controller = loader.getController();
		controller.loadUser(userObj);
		
		Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
		
		window.setScene(scene);
		window.show();
		window.centerOnScreen();
	}
	
	public void employeeManageScreen( ActionEvent event ) throws Exception{
		
		if( userObj.getType().equalsIgnoreCase("HR Manager") ) {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/EmployeeManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			EmployeeController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			Generator.getAlert("Access Denied", "You don't have access to Employee Management");
		}
	}
	
	public void customerOrderCartScreen( ActionEvent event ) throws Exception{
		
		if( userObj.getType().equalsIgnoreCase("Salesman") ) {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/CustomerOrderCart.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			CustomerOrderController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Customer Orders");
		}
	}
	
	public void supplierManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Supplier Manager")) {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/SupplierManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			SupplierController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Supplier Management");
		}
		
	}
	
	public void inventoryManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Stock Manager"))
		{
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/InventoryManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			InventoryController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
			
		}else {
			Generator.getAlert("Access Denied", "You don't have access to Inventory Management");
		}
	
	}
	
	public void customerManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Salesman")) {
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/CustomerManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			CustomerController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Customer Management");
		}
		
	}
	
	public void financeManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Accountant")) {
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/FinanceManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			FinanceController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Finance Management");
		}
		
	}
	
	public void itemRepairManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Stock Manager")) {
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/ItemRepairManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			ItemRepairController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
			
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Item Repair Management");
		}

	}
	
	public void deliveryManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Transport Manager")) {
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/DeliveryManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			DeliveryController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Delivery Management");
		}
		
	}
	
	public void userManageScreen( ActionEvent event ) throws Exception{
		FXMLLoader loader = new FXMLLoader();
		loader.setLocation(getClass().getResource("/view/UserManage.fxml"));
		Parent parent = loader.load();
		
		Scene scene =  new Scene(parent);
		scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
		
		UserController controller = loader.getController();
		controller.loadUser(userObj);
		
		Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
		
		window.setScene(scene);
		window.show();
		window.centerOnScreen();
	}
	//end Screen changing functions


	public boolean validateFields() {
		if(txtPaymentID.getText().isEmpty() && txtPaymentID.getText().isEmpty() && txtdate.getValue().toString().isEmpty() && txttime.getText().isEmpty() && txtamount.getText().isEmpty() && txtquantity.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the fields Empty");
			System.out.println("Do not keep the fields Empty");
			return false;
		}
		if(txtPaymentID.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the Payment ID field Empty");
			System.out.println("Do not keep the Payment ID field Empty");
			return false;
		}
		if(txtOrderID.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the Order field Empty");
			System.out.println("Do not keep the Order field Empty");
			return false;
		}
		if(txtdate.getValue().toString().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the Date Field Empty");
			System.out.println("Do not keep the Date Field Empty");
			return false;
		}
		
		if(txttime.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the time field Empty");
			System.out.println("Do not keep the time field Empty");
			return false;
		}
		if(txtamount.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the Payment Amount field Empty");
			System.out.println("Do not keep the Payment Amount field Empty");
			return false;
		}
		if(txtquantity.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the Quantity field Empty");
			System.out.println("Do not keep the Quantity field Empty");
			return false;
		}	
		return true;
     } 	
	 public boolean validateDelPayID() {
		if(delpayID.getText().isEmpty()) {
			Generator.getAlert("Warning", "Enter the Payment ID");
			System.out.println("Enter the Payment ID");
			return false;
		}
		return true;
	}
	 private boolean validatePayID() {
			Pattern p = Pattern.compile("[A-Za-z]+[0-9]+");
			Matcher m = p.matcher(txtPaymentID.getText());
			if(m.find() && m.group().equals(txtPaymentID.getText())) {
				return true;
			}
			else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Warning...!!!");
				alert.setHeaderText(null);
				alert.setContentText("Enter a Valid Payment ID");
				alert.showAndWait();
				System.out.println("Boom");
				return false;
			}
			
		}
	 private boolean validateOrdID() {
			Pattern p = Pattern.compile("[A-Za-z]+[0-9]+");
			Matcher m = p.matcher(txtOrderID.getText());
			if(m.find() && m.group().equals(txtOrderID.getText())) {
				return true;
			}
			else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Warning...!!!");
				alert.setHeaderText(null);
				alert.setContentText("Enter a Valid OrderID");
				alert.showAndWait();
				System.out.println("Boom1");
				return false;
			}
			
		}
	 private boolean validateAmt() {
			Pattern p = Pattern.compile("[0-9]+");
			Matcher m = p.matcher(txtamount.getText());
			if(m.find() && m.group().equals(txtamount.getText())) {
				return true;
			}
			else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Warning...!!!");
				alert.setHeaderText(null);
				alert.setContentText("Enter a Valid Payment Amount");
				alert.showAndWait();
				System.out.println("Boom2");
				return false;
			}
			
		}
	 private boolean validateQuantity() {
			Pattern p = Pattern.compile("[0-9]+");
			Matcher m = p.matcher(txtquantity.getText());
			if(m.find() && m.group().equals(txtquantity.getText())) {
				return true;
			}
			else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Warning...!!!");
				alert.setHeaderText(null);
				alert.setContentText("Enter a Valid Quantity Number");
				alert.showAndWait();
				System.out.println("Boom3");
				return false;
			}
			
		}
	 private boolean validateType() {
			Pattern p = Pattern.compile("[A-Za-z]+");
			Matcher m = p.matcher(txttype.getSelectionModel().getSelectedItem().toString());
			if(m.find() && m.group().equals(txttype.getSelectionModel().getSelectedItem().toString())) {
				return true;
			}
			else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Warning...!!!");
				alert.setHeaderText(null);
				alert.setContentText("Enter a Valid Payment Type");
				alert.showAndWait();
				System.out.println("Boom4");
				return false;
			}
			
		}
	 
	//end of Supplier changing screen functions
	 public void supplierOrderScreen( ActionEvent event ) throws Exception{
			if(userObj.getType().equalsIgnoreCase("Supplier Manager")) {
				FXMLLoader loader = new FXMLLoader();
				loader.setLocation(getClass().getResource("/view/SupplierOrder.fxml"));
				Parent parent = loader.load();
				
				Scene scene =  new Scene(parent);
				scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
				
				SupplierOrderController controller = loader.getController();
				controller.loadUser(userObj);
				
				Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
				
				window.setScene(scene);
				window.show();
				window.centerOnScreen();
			}else {
				
				Generator.getAlert("Access Denied", "You don't have access to Supplier Management");
			}
		}
	 
		public void supplierReport(ActionEvent event ) throws Exception{

			if(userObj.getType().equalsIgnoreCase("Supplier Manager")) {
				FXMLLoader loader = new FXMLLoader();
				loader.setLocation(getClass().getResource("/view/SupplierDetailsReport.fxml"));
				Parent parent = loader.load();
				
				Scene scene =  new Scene(parent);
				scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
				
				SupplierDetailsReportController controller = loader.getController();
				controller.loadUser(userObj);
				
				Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
				
				window.setScene(scene);
				window.show();
				window.centerOnScreen();
			}else {
				
				Generator.getAlert("Access Denied", "You don't have access to Supplier Management");
			
			}
		}
	
}
