package controller;

import model.Main;
import model.User;
//import model.repairOrderFormModel;
import model.supplier;
import model.supplierOrder;
import service.EmployeeServiceImpl;
import service.IEmployeeService;
import service.ISupplierService;
import service.SupplierImpl;
import javafx.collections.transformation.SortedList;
import util.Generator;
import util.sqlConnection;
import javafx.collections.transformation.FilteredList;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.function.Predicate;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.layout.AnchorPane;
import javafx.scene.text.Text;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class SupplierOrderController implements Initializable{
	
	PreparedStatement preparedStatement=null;
	ResultSet resultSet=null;
	Connection connection;
	//public ObservableList<Emp> list = FXCollections.observableArrayList();
	
	
	@FXML
	private Label userLbl;
	
	@FXML
	TableView<supplierOrder> ordertable;
	@FXML
	private TableColumn<?, ?> idcol;
	@FXML
	private TableColumn<?, ?> supcol;
	@FXML
	private TableColumn<?, ?> datecol;
	@FXML
	private TableColumn<?, ?> timecol;
	@FXML
	private TableColumn<?, ?> amountcol;
	
	public ObservableList<supplierOrder> list = FXCollections.observableArrayList();
	
	@FXML
	private TextField txtOrderID;
	@FXML
	private TextField txtSupplierID;
	@FXML
	private DatePicker txtdate;
	@FXML
	private TextField txttime;
	@FXML
	private TextField txtamount;
	@FXML
	private TextField delorderID;
	@FXML
	private TextField ordID;
	
	FilteredList<supplierOrder> filter = new FilteredList(list, e -> true);
	
	@FXML
	private Label userLabel;
	
	private User userObj = new User();
    
    public void loadUser(User user) {

    	this.userObj = user;
    	
    	IEmployeeService empService = new EmployeeServiceImpl();
  
    	userLabel.setText(empService.loadname(userObj));
    }
	
	
	
    public void loadDBdata() {
		
		list.clear();
		
		ISupplierService iSupplierService = new SupplierImpl();
		
		ArrayList<supplierOrder> supList = iSupplierService.getAllSupplierOrder();
		
		for(supplierOrder sup : supList) {
			list.add(sup);
		}
			
		ordertable.setItems(list);	
	}

    ISupplierService iSupplierService = new SupplierImpl();
	// Event Listener on Button.onAction
	@FXML
	public void AddNewOrder(ActionEvent event) throws SQLException {
		// TODO Autogenerated
		if(validateFields()) {
			if(validateSupID()) {
				//if(validateOrdDate()) {
					//if(validateOrdTime()) {
						if(validateOrdAmt()) {
		supplierOrder sup = new supplierOrder();
		
		sup.setOID(txtOrderID.getText());
		sup.setSID(txtSupplierID.getText());
		sup.setOdate(txtdate.getValue().toString());
		sup.setOtime(txttime.getText());
		sup.setOamount(txtamount.getText());
		
		iSupplierService.addSupplierOrder(sup);
		
		clear(event);
		
		//list.clear();
	
		  loadDBdata();
		  txtOrderID.setText(Generator.generateSupplierOrderId());
		 }
	}
	  }	
	}
	//static String tmpEmpName;
	@Override
	public void initialize(URL location, ResourceBundle resource) {
		
		//connection = sqlConnection.Connector();
		txtOrderID.setText(Generator.generateSupplierOrderId());
		loadDBdata();
		
		
		idcol.setCellValueFactory(new PropertyValueFactory<>("oID"));
		supcol.setCellValueFactory(new PropertyValueFactory<>("sID"));
		datecol.setCellValueFactory(new PropertyValueFactory<>("odate"));
		timecol.setCellValueFactory(new PropertyValueFactory<>("otime"));
		amountcol.setCellValueFactory(new PropertyValueFactory<>("oamount"));
		
		//countrycol.setCellValueFactory(new PropertyValueFactory<>("sCountry"));
		
		//ordertable.setItems(list);
		
		/*table.setOnMouseClicked(p ->{
		
			String query =  "select * from empregister";
			
			try {
				preparedStatement = connection.prepareStatement(query);
				resultSet = preparedStatement.executeQuery();
			
				
				while(resultSet.next())
				{
							txtempname.setText(resultSet.getString("EmpName"));
							txtaddress.setText(resultSet.getString("Address"));
							txtNic.setText(resultSet.getString("NIC"));
							txtdesig.setText(resultSet.getString("Designation"));
							txtTel.setText(resultSet.getString("Telephone"));
							txtemail.setText(resultSet.getString("Email"));
							
					//table.setItems(list);
				}
				preparedStatement.close();
				resultSet.close();
			}catch (Exception e) {
				// TODO: handle exception
				System.out.println(e);
			}
			
	
		});*/
		
	}
	
	public void clear(ActionEvent event) {
		txtOrderID.setText("");
		txtSupplierID.setText("");
		txtdate.setValue(null);
		txttime.setText("");
		txtamount.setText("");
	}
	
	static String tempNid;
	@FXML
	public void ShowOnClick() {
			supplierOrder sup = ordertable.getSelectionModel().getSelectedItem();
			
			tempNid = sup.getOID();
			
			txtOrderID.setText(sup.getOID());
			txtSupplierID.setText(sup.getSID());
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			String date = sup.getOdate();
			LocalDate localDate = LocalDate.parse(date, formatter);
			txtdate.setValue(localDate);
			//txtdate.setText(order.getOdate());
			txttime.setText(sup.getOtime());
			txtamount.setText(sup.getOamount());
			delorderID.setText(sup.getOID());
			//txtcountry.setText(sup.getSCountry());
			
			//preparedStatement.close();
			//resultSet.close();
			
	}
	
	@FXML
	private void deleteData(ActionEvent event) {
		if(validateDelOrderID()) {
			
			iSupplierService.deleteSupplierOrder(txtOrderID.getText());
			clear(event);
		    loadDBdata();
		    txtOrderID.setText(Generator.generateSupplierOrderId());
		   }
		
	}
	@FXML
    public void Updateuser(ActionEvent event) {
			supplierOrder sup = new supplierOrder();
			
			sup.setOID(txtOrderID.getText());
			sup.setSID(txtSupplierID.getText());
			sup.setOdate(txtdate.getValue().toString());
			sup.setOtime(txttime.getText());
			sup.setOamount(txtamount.getText());
			
			iSupplierService.updateSupplierOrder(sup);
			//preparedStatement.execute();
			clear(event);
		//	preparedStatement.close();
			loadDBdata();
			txtOrderID.setText(Generator.generateSupplierOrderId());
		
    }
	
	@FXML
	public void searchSupplierOrder(javafx.scene.input.KeyEvent event) {
		
		ordID.textProperty().addListener((observable, oldValue, newValue) -> {
			
			filter.setPredicate((Predicate<? super supplierOrder>) (supplierOrder sList) ->{
				if(newValue.isEmpty() || newValue == null) {
					return true;
				}
				else if(sList.getOID().contains(newValue)) {
					return true;
				}
				
				return false;
			});
	});
		
		SortedList sort = new SortedList(filter);
		sort.comparatorProperty().bind(ordertable.comparatorProperty());
		ordertable.setItems(sort);
	
	}
	
	public void demo(ActionEvent event) {
		txtOrderID.setText("O008");
		txtSupplierID.setText("S003");
		//txtdate.setValue(null);
		txttime.setText("09:45");
		txtamount.setText("100000");
	}
	
	
	public void ExitWindow(ActionEvent event) throws Exception{
		Platform.exit();
	}
	
	public void MinimizeWindow(ActionEvent event) throws Exception{
		FXMLLoader loader = new FXMLLoader();
		loader.setLocation(getClass().getResource("/view/Login.fxml"));
		Parent parent = loader.load();
		
		Scene scene =  new Scene(parent);
		scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());

		
		Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
		
		window.setScene(scene);
		window.show();
		window.centerOnScreen();
	}
	
	
	
	//Functions to change the screens 
	public void homeScreen( ActionEvent event ) throws Exception{
		FXMLLoader loader = new FXMLLoader();
		loader.setLocation(getClass().getResource("/view/Home.fxml"));
		Parent parent = loader.load();
		
		Scene scene =  new Scene(parent);
		scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
		
		HomeController controller = loader.getController();
		controller.loadUser(userObj);
		
		Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
		
		window.setScene(scene);
		window.show();
		window.centerOnScreen();
	}
	
	public void employeeManageScreen( ActionEvent event ) throws Exception{
		
		if( userObj.getType().equalsIgnoreCase("HR Manager") ) {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/EmployeeManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			EmployeeController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			Generator.getAlert("Access Denied", "You don't have access to Employee Management");
		}
	}
	
	public void customerOrderCartScreen( ActionEvent event ) throws Exception{
		
		if( userObj.getType().equalsIgnoreCase("Salesman") ) {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/CustomerOrderCart.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			CustomerOrderController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Customer Orders");
		}
	}
	
	public void supplierManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Supplier Manager")) {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/SupplierManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			SupplierController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Supplier Management");
		}
		
	}
	
	public void inventoryManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Stock Manager"))
		{
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/InventoryManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			InventoryController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
			
		}else {
			Generator.getAlert("Access Denied", "You don't have access to Inventory Management");
		}
	
	}
	
	public void customerManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Salesman")) {
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/CustomerManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			CustomerController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Customer Management");
		}
		
	}
	
	public void financeManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Accountant")) {
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/FinanceManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			FinanceController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Finance Management");
		}
		
	}
	
	public void itemRepairManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Stock Manager")) {
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/ItemRepairManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			ItemRepairController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
			
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Item Repair Management");
		}

	}
	
	public void deliveryManageScreen( ActionEvent event ) throws Exception{
		
		if(userObj.getType().equalsIgnoreCase("Transport Manager")) {
			
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/DeliveryManage.fxml"));
			Parent parent = loader.load();
			
			Scene scene =  new Scene(parent);
			scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
			
			DeliveryController controller = loader.getController();
			controller.loadUser(userObj);
			
			Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
			
			window.setScene(scene);
			window.show();
			window.centerOnScreen();
		}else {
			
			Generator.getAlert("Access Denied", "You don't have access to Delivery Management");
		}
		
	}
	
	public void userManageScreen( ActionEvent event ) throws Exception{
		FXMLLoader loader = new FXMLLoader();
		loader.setLocation(getClass().getResource("/view/UserManage.fxml"));
		Parent parent = loader.load();
		
		Scene scene =  new Scene(parent);
		scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
		
		UserController controller = loader.getController();
		controller.loadUser(userObj);
		
		Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
		
		window.setScene(scene);
		window.show();
		window.centerOnScreen();
	}
	//end Screen changing functions

	//end Screen changing functions
	
	public boolean validateFields() {
		if(txtOrderID.getText().isEmpty() && txtSupplierID.getText().isEmpty() && txtdate.getValue().toString().isEmpty() && txttime.getText().isEmpty() && txtamount.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the fields Empty");
			System.out.println("Do not keep the fields Empty");
			return false;
		}
		if(txtSupplierID.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the Supplier ID field Empty");
			System.out.println("Do not keep the Supplier ID field Empty");
			return false;
		}
		if(txtdate.getValue().toString().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the date field Empty");
			System.out.println("Do not keep the date field Empty");
			return false;
		}
		if(txttime.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the Time field Empty");
			System.out.println("Do not keep the Time field Empty");
			return false;
		}
		if(txtamount.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the Order Amount field Empty");
			System.out.println("Do not keep the Order Amount field Empty");
			return false;
		}
		if(txtOrderID.getText().isEmpty()) {
			Generator.getAlert("Error", "Do not keep the Order ID field Empty");
			System.out.println("Do not keep the Order ID field Empty");
			return false;
		}
		/*if(txtcountry.getText().isEmpty()) {
			//Generator.getAlert("Error", "Do not keep the Country field Empty");
			System.out.println("Do not keep the Country field Empty");
			return false;
		}*/	
		return true;
     } 	
	 public boolean validateDelOrderID() {
		if(delorderID.getText().isEmpty()) {
			Generator.getAlert("Warning", "Enter the Order ID");
			System.out.println("Enter the Order ID");
			return false;
		}
		return true;
	}
	
	
	 private boolean validateOrdId() {
			Pattern p = Pattern.compile("[A-Za-z]+[0-9]+");
			Matcher m = p.matcher(txtOrderID.getText());
			if(m.find() && m.group().equals(txtOrderID.getText())) {
				return true;
			}
			else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Warning...!!!");
				alert.setHeaderText(null);
				alert.setContentText("Enter a Valid Order ID");
				alert.showAndWait();
				System.out.println("Boom");
				return false;
			}
			
		}
	 private boolean validateSupID() {
			Pattern p = Pattern.compile("[A-Za-z]+[0-9]+");
			Matcher m = p.matcher(txtSupplierID.getText());
			if(m.find() && m.group().equals(txtSupplierID.getText())) {
				return true;
			}
			else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Warning...!!!");
				alert.setHeaderText(null);
				alert.setContentText("Enter a Valid Supplier ID");
				alert.showAndWait();
				System.out.println("Boom1");
				return false;
			}
			
		}
	/* private boolean validateOrdDate() {
			Pattern p = Pattern.compile("[0-9]+");
			Matcher m = p.matcher(txtdate.getText());
			if(m.find() && m.group().equals(txtdate.getText())) {
				return true;
			}
			else {
				//Alert alert = new Alert(AlertType.ERROR);
				//alert.setTitle("Warning...!!!");
				//alert.setHeaderText(null);
				//alert.setContentText("Enter a Valid Telephone Number");
				//alert.showAndWait();
				System.out.println("Boom2");
				return false;
			}
			
		}
	 private boolean validateOrdTime() {
			Pattern p = Pattern.compile("[0-9]+");
			Matcher m = p.matcher(txttime.getText());
			if(m.find() && m.group().equals(txttime.getText())) {
				return true;
			}
			else {
				//Alert alert = new Alert(AlertType.ERROR);
				//alert.setTitle("Warning...!!!");
				//alert.setHeaderText(null);
				//alert.setContentText("Enter a Valid Supplier Address");
				//alert.showAndWait();
				System.out.println("Boom3");
				return false;
			}
			
		}*/
	 private boolean validateOrdAmt() {
			Pattern p = Pattern.compile("[0-9]+");
			Matcher m = p.matcher(txtamount.getText());
			if(m.find() && m.group().equals(txtamount.getText())) {
				return true;
			}
			else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Warning...!!!");
				alert.setHeaderText(null);
				alert.setContentText("Enter a Valid Order Amount");
				alert.showAndWait();
				System.out.println("Boom4");
				return false;
			}
			
		}
	 
	//end of Supplier changing Screen functions
	 public void supplierPaymentScreen( ActionEvent event ) throws Exception{

			if(userObj.getType().equalsIgnoreCase("Supplier Manager")) {
				FXMLLoader loader = new FXMLLoader();
				loader.setLocation(getClass().getResource("/view/SupplierPayment.fxml"));
				Parent parent = loader.load();
				
				Scene scene =  new Scene(parent);
				scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
				
				SupplierPaymentController controller = loader.getController();
				controller.loadUser(userObj);
				
				Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
				
				window.setScene(scene);
				window.show();
				window.centerOnScreen();
			}else {
				
				Generator.getAlert("Access Denied", "You don't have access to Supplier Management");
			
			}
	 }
	 
		public void supplierReport(ActionEvent event ) throws Exception{

			if(userObj.getType().equalsIgnoreCase("Supplier Manager")) {
				FXMLLoader loader = new FXMLLoader();
				loader.setLocation(getClass().getResource("/view/SupplierDetailsReport.fxml"));
				Parent parent = loader.load();
				
				Scene scene =  new Scene(parent);
				scene.getStylesheets().add(getClass().getResource("/view/application.css").toExternalForm());
				
				SupplierDetailsReportController controller = loader.getController();
				controller.loadUser(userObj);
				
				Stage window  = (Stage) ((Node)event.getSource()).getScene().getWindow();
				
				window.setScene(scene);
				window.show();
				window.centerOnScreen();
			}else {
				
				Generator.getAlert("Access Denied", "You don't have access to Supplier Management");
			
			}
		}
}
